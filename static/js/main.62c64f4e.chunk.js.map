{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/Signup.js","components/Dashboard.js","components/Login.js","components/PrivateRoute.js","components/ForgotPassword.js","components/UpdateProfile.js","components/App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","Signup","emailRef","useRef","passwordRef","passwordConfirmRef","error","setError","history","useHistory","e","a","preventDefault","current","push","Card","Body","className","Alert","variant","Form","onSubmit","Group","id","Label","Control","type","ref","required","Button","disabled","to","Dashboard","varriant","onClick","Login","style","textDecoration","PrivateRoute","Component","component","rest","render","props","ForgotPassword","message","setMessage","UpdateProfile","promises","emil","Promise","all","then","catch","finally","defaultValue","placeholder","App","Container","minHeight","maxWidth","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62c64f4e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\"\n\n// .env.local 에 저장한 정보 불러오기\n// firebase 생성자에 모든 정보 저장\nconst app = firebase.initializeApp({\n    apiKey: \"AIzaSyDsCGra5Bv0FnyU3MpN-ocxYgObzvbLNgE\",\n    authDomain: \"react-firebase-routing.firebaseapp.com\",\n    projectId: \"react-firebase-routing\",\n    storageBucket: \"react-firebase-routing.appspot.com\",\n    messagingSenderId: \"8736831470\",\n    appId: \"1:8736831470:web:edae272aef7884c74f40ff\",\n    measurementId: \"G-Z2HSHWGL8E\"\n})\n\n// 인증을위한 변수를 성정 \nexport const auth = app.auth();\nexport default app;","import React, {useContext, useState, useEffect } from 'react'\nimport { auth } from '../firebase';\n\n// 인증 Context 생성\nconst AuthContext = React.createContext()\n\n// Context를 사용할기위한 useContext 선언\nexport function useAuth() {\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({ children }) {\n     // 상태로 처리할 사용자  설정\n    const [currentUser, setCurrentUser] = useState();\n    const [loading, setLoading] = useState(true);\n\n    // 회원가입 대한 액션 설정\n    // firebase 가 localstorge로 사용자가 이미로그인한경우 해당사용자를 연결하고 이를 on off 상태에서 확일하할지를 여기서 설정한다. \n    function signup(email, password) {\n        // useState(ture) 로 시작 즉시 실행되개 하는 것 \n        setLoading(false);\n        return auth.createUserWithEmailAndPassword(email , password)\n    };\n\n    // 로그인 시 액션 설정\n    function login(email, password) {\n        return auth.signInWithEmailAndPassword(email, password)\n    }  \n\n    \n    // 로그아웃시 액션 설정 == 아무 정보도 가져올 필요 없으므로 () 비움\n    function logout() {\n       return  auth.signOut();\n    }\n\n   // 비밀번호찾기에 대한 context 선언\n    function resetPassword(email) {\n        // 만들었던 이메일주소로 메일을 보냄\n        return auth.sendPasswordResetEmail(email);\n    }\n\n    // 이메일과 비밀번호를 업데이트 하게 만들기\n    function updateEmail(email) {\n        // 업데이트할 이메일을 return \n       return currentUser.updateEmail(email);\n\n    }\n\n\n    function updatePassword(password) {\n        // 업데이트할 비밀번호를 return \n        return currentUser.updatePassword(password);\n    }\n\n\n      \n    // 사용자가 입력할때만 이펙트를 적용하도록 설정하기\n    useEffect(() => {\n   // 사용자가 로그인 하거나 회원가입 하거나 오류가 발생할때 알려주는 값 설정\n   // 가입하고 취소할수 있게 unsubscribe\n   const unsubscribe =  auth.onAuthStateChanged(user => {\n    // 사용자를 허용\n    setCurrentUser(user)\n    setLoading(false)\n     })\n\n\n     return unsubscribe\n    }, [])\n\n    const value = {\n        // 값에 현재 사용자를 저장 \n        currentUser,\n        login,\n        signup,\n        logout,\n        resetPassword,\n        updateEmail,\n        updatePassword\n    }\n    return (\n        // Provider를 반환\n        <AuthContext.Provider value={value}>\n            {/* 로딩하고 있지않다면 render 하고 그렇지않다면 랜더링 을 안함 */}\n            {/* 현재 로딩이 뒤에서 선언되었기 떄문에 먼저로딩하지않게 ! 논리연산자에 not(!) 연산자를 붙여준다  */}\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}\n","import React, {useRef, useState} from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport { Link, useHistory } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport default function Signup() {\n    // 이메일 비밀번호 비밀번호 확인에 대한 useRef 주소가 필요하기 때문에 이 세게를 묶어 선언한다.\n    const emailRef = useRef()\n    const passwordRef = useRef()\n    const passwordConfirmRef = useRef()\n    \n    // 회원 가입 시 이벤트를 가져옴 + 현재 가입된 유저가 있다는 것을 판단하고 경고를 내주는 것을 currentUser로 선언\n    // 현재 사용자 currentUser는 현재 필요 없기 떄문에 지운다.\n    const { signup } = useAuth()\n\n    // 오류 걸러냄\n    const [error, setError] = useState(\"\")\n\n    // 로딩\n    const [loading, setLoading] = useState(false);\n\n\n    // 회원가입시 로그인창으로 이동 \n    const history = useHistory();\n\n     // async 주의\n     async function handleSubmit(e) {\n        e.preventDefault()\n\n        // 비밀번호가 재획인 값과 동일한지 판단해서 값이 아닐경우 경고를 줌\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n              return setError(\"비밀번호가 동일하지 않습니다.\")\n        }\n\n        // 오류가 발생할때 회원가입을 막기위한 try설정\n        try {\n            // 시도전 오류를 먼저\n            setError(\"\")\n            // 계정을 여러번 만들지 않게 방지하도록 setLoading값을 설정\n            setLoading(true)\n            // 로그인시 브라우저가 확인할 이메일 비밀번호를 참고하게 만듬\n            // 오류가 발생할떄 비동기식 함수를 작동해서 이 액션을 기다리다 오류를 뱉어내기\n            // await signup(emailRef.current.value, passwordRef.current.value)\n            // 현재 로그인을 최종적으로 보여주기 위해 await 에 login\n            await signup(emailRef.current.value, passwordRef.current.value)\n            history.push('/');\n\n        } catch {\n            // 오류 설정\n            // 비밀번호 오류가 발생하는 이유는 이미 가입된 중복정보 이기 떄문이다. \n            setError(\"비밀번호가 맞지않아 회원가입이 불가능합니다.\")\n        }\n        // 모든 작업이 완료될떄 로딩을 비활성\n        setLoading(false)\n \n\n    }\n\n    return (\n        <>\n        <Card>\n            <Card.Body>\n                  <h2 className=\"text-center mb-4\">회원 가입</h2>\n                  {/* 가입된 사용자는 문자열로 판단하기 때문에 JSON으로 반환한다. */}\n               \n                  {/* {JSON.stringify(currentUser) } */}\n\n                  {/* 현재 가입된 이메일이라 알리기 위해 currentUser에 현재 가입된 이메일을 대입  */}\n                  {/* 이곳에서 바로 정보 확인 */}\n                  {/* {currentUser.email}  */}\n                  {/* {currentUser && currentUser.email} */}\n\n                  {error && <Alert variant=\"danger\">{error}</Alert>}\n                  <Form onSubmit={handleSubmit}>\n                      <Form.Group id=\"email\">\n                         <Form.Label>이메일 주소</Form.Label>\n                         <Form.Control type=\"email\" ref={emailRef} required  />\n                      </Form.Group>\n                      <Form.Group id=\"password\">\n                         <Form.Label>비밀번호</Form.Label>\n                         <Form.Control type=\"password\" ref={passwordRef} required  />\n                      </Form.Group>\n                      <Form.Group id=\"password-confirm\">\n                         <Form.Label>비밀번호 재확인</Form.Label>\n                         <Form.Control type=\"password\" ref={passwordConfirmRef} required  />\n                      </Form.Group>\n                      <br/>\n                      {/* 기존 회원 비활성 */}\n                      <Button disabled={loading} className=\"w-100\" type=\"submit\">\n                          회원 가입\n                    </Button>\n                  </Form>\n            </Card.Body> \n            </Card>\n            <div className=\"w-100 text-center mt-2\">\n               로그인을 하시겠습니까? <Link to=\"/login\">로그인\n               </Link>\n            </div>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport { Card, Button, Alert} from 'react-bootstrap'\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\n\nexport default function Dashboard() {\n    // 로그인 실패시 오류 숨기기\n    const [error, setError] = useState(\"\");\n    const { currentUser, logout } = useAuth();\n  \n    const history = useHistory()\n\n    // 로그아웃시 async 로 다시 로그인 화면으로 이동\n    async function handleLogout() {\n        setError('')\n\n        try {\n            await logout()\n            history.push('/login')\n\n        } catch {\n            setError(\"로그아웃 실패!\")\n        }\n    }\n\n\n    return (\n        <>\n          <Card>\n              <Card.Body>\n                   <h2 className=\"text-center mb-4\">프로필</h2>\n                   {error && <Alert variant=\"danger\">{error}</Alert>}\n                   <strong>이메일: </strong> {currentUser.email}\n                   <Link to=\"/update-profile\" className=\"btn btn-primary w-100\n                     mt-3\">프로필 업데이트</Link>\n              </Card.Body>\n          </Card>\n          <div className=\"w-100 text-center mt-2\">\n               <Button varriant=\"link\" onClick={handleLogout}>로그 아웃</Button>\n           </div>\n        </>\n    )\n}\n","import React, {useRef, useState} from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\n\n\nexport default function Login() {\n   // 이메일 비밀번호 비밀번호 확인에 대한 useRef 주소가 필요하기 때문에 이 세게를 묶어 선언한다.\n   const emailRef = useRef()\n   const passwordRef = useRef()\n   \n   // 회원 가입 시 이벤트를 가져옴 + 현재 가입된 유저가 있다는 것을 판단하고 경고를 내주는 것을 currentUser로 선언\n   // 현재 사용자 currentUser는 현재 필요 없기 떄문에 지운다.\n   const { login } = useAuth()\n   // 오류 걸러냄\n   const [error, setError] = useState(\"\")\n   // 로딩\n   const [loading, setLoading] = useState(false);\n\n\n   // 로그인 성공시 history 리다이렉션 이동 \n   const history  = useHistory();\n\n    // async 주의\n    async function handleSubmit(e) {\n       e.preventDefault()\n\n \n\n       // 오류가 발생할때 회원가입을 막기위한 try설정\n       try {\n           // 시도전 오류를 먼저\n           setError(\"\")\n           // 계정을 여러번 만들지 않게 방지하도록 setLoading값을 설정\n           setLoading(true)\n           // 로그인시 브라우저가 확인할 이메일 비밀번호를 참고하게 만듬\n           // 오류가 발생할떄 비동기식 함수를 작동해서 이 액션을 기다리다 오류를 뱉어내기\n           await login(emailRef.current.value, passwordRef.current.value)\n\n           // 로그인시 이동 \n           history.push(\"/\")\n       } catch {\n           // 오류 설정\n           // 비밀번호 오류가 발생하는 이유는 이미 가입된 중복정보 이기 떄문이다. \n           setError(\"비밀번호 오류로 로그인이 불가능합니다.\")\n       }\n       // 모든 작업이 완료될떄 로딩을 비활성\n       setLoading(false)\n\n\n   }\n\n   return (\n       <>\n       <Card>\n           <Card.Body>\n                 <h2 className=\"text-center mb-4\">로그인</h2>\n                 {/* 가입된 사용자는 문자열로 판단하기 때문에 JSON으로 반환한다. */}\n              \n                 {/* {JSON.stringify(currentUser) } */}\n\n                 {/* 현재 가입된 이메일이라 알리기 위해 currentUser에 현재 가입된 이메일을 대입  */}\n                 {/* 이곳에서 바로 정보 확인 */}\n                 {/* {currentUser.email}  */}\n                 {/* {currentUser && currentUser.email} */}\n\n                 {error && <Alert variant=\"danger\">{error}</Alert>}\n                 <Form onSubmit={handleSubmit}>\n                     <Form.Group id=\"email\">\n                        <Form.Label>이메일 주소</Form.Label>\n                        <Form.Control type=\"email\" ref={emailRef} required  />\n                     </Form.Group>\n                     <Form.Group id=\"password\">\n                        <Form.Label>비밀번호</Form.Label>\n                        <Form.Control type=\"password\" ref={passwordRef} required  />\n                     </Form.Group>\n                     <br/>\n                     {/* 기존 회원 비활성 */}\n                     <Button disabled={loading} className=\"w-100\" type=\"submit\">\n                         로그인\n                   </Button>\n                 </Form>\n           <div className=\"w-100 text-center mt-3\">\n                <Link to=\"/forgot-password\">비밀번호를 잊으셨나요?</Link>\n           </div>  \n           </Card.Body> \n           </Card>\n           <div className=\"w-100 text-center mt-2\">\n              회원 가입 하셨나요?\n               <Link to=\"/signup\" style={{ textDecoration: 'none' }}>\n                   회원가입\n                </Link>\n           </div>\n       </>\n   )\n}\n","import React from 'react'\nimport { Redirect, Route } from 'react-router'\nimport { useAuth } from '../contexts/AuthContext';\n\n// 로그아웃시 로그인 화면으로 돌아가기위한 리다이렉션 route설정\n// component 를 Component로 전환\nexport default function PrivateRoute({ component: Component, ...rest }\n    ) {\n       const { currentUser} = useAuth();\n        return (\n       <Route\n         {...rest}\n         render={props => {\n             // 현재 사용자로 판단되면 렌더링  개인이 랜더링 하고 login 페이지 이동\n             // 시작 할때 로그인 화면으로 이동시키게 고정되며 localhost로 들어가도 처음 시작 화면인 \n             //  로그이인 되지 않을시 로그인 화면으로 리다이렉션이 된다.\n            return currentUser ? <Component {...props} /> :  <Redirect \n            to=\"/login\" />\n         }}\n       >\n\n       </Route>\n     \n    )\n}\n","import React, {useRef, useState} from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link } from 'react-router-dom';\n\n\nexport default function ForgotPassword() {\n   // 이메일 비밀번호 비밀번호 확인에 대한 useRef 주소가 필요하기 때문에 이 세게를 묶어 선언한다.\n   const emailRef = useRef()\n   \n   // 회원 가입 시 이벤트를 가져옴 + 현재 가입된 유저가 있다는 것을 판단하고 경고를 내주는 것을 currentUser로 선언\n   // 현재 사용자 currentUser는 현재 필요 없기 떄문에 지운다.\n   const { resetPassword } = useAuth()\n   // 오류 걸러냄\n   const [error, setError] = useState(\"\")\n   \n   // 사용자에게 재설정할 메세지를 보냄\n   const [message, setMessage] = useState(\"\")\n\n   // 로딩\n   const [loading, setLoading] = useState(false);\n      \n\n//    // 로그인 성공시 history 리다이렉션 이동 \n//    const history  = useHistory();\n\n    // async 주의\n    async function handleSubmit(e) {\n       e.preventDefault()\n\n \n\n       // 오류가 발생할때 회원가입을 막기위한 try설정\n       try {\n           setMessage('');\n           // 시도전 오류를 먼저\n           setError(\"\")\n           // 계정을 여러번 만들지 않게 방지하도록 setLoading값을 설정\n           setLoading(true)\n            // 비밀번호를 찾기위한 await 선언\n            await resetPassword(emailRef.current.value)  \n            \n            // 메세지 설정 \n            setMessage('이메일 링크에 재설정할 링크를 첨부했습니다.')\n\n        //    // 로그인시 이동 \n        //      비밀번호를 재설정할때 페이지 변경이 되지않도록 선언ㅇ하지않는다.\n        //    history.push(\"/\")\n\n        \n       } catch {\n           // 오류 설정\n           // 비밀번호가 없을때 오류를 반환\n           setError(\"비밀번호를 찾을수 없습니다..\")\n       }\n       // 모든 작업이 완료될떄 로딩을 비활성\n       setLoading(false)\n\n\n   }\n\n   return (\n       <>\n       <Card>\n           <Card.Body>\n                 <h2 className=\"text-center mb-4\">비밀번호 찾기</h2>\n                 {/* 가입된 사용자는 문자열로 판단하기 때문에 JSON으로 반환한다. */}\n              \n                 {/* {JSON.stringify(currentUser) } */}\n\n                 {/* 현재 가입된 이메일이라 알리기 위해 currentUser에 현재 가입된 이메일을 대입  */}\n                 {/* 이곳에서 바로 정보 확인 */}\n                 {/* {currentUser.email}  */}\n                 {/* {currentUser && currentUser.email} */}\n\n                 {error && <Alert variant=\"danger\">{error}</Alert>}\n                {/* 사용자에게 이메일이 전송되는것을 알고  */}\n                {message && <Alert variant=\"danger\">{message}</Alert>}\n\n                 <Form onSubmit={handleSubmit}>\n                     <Form.Group id=\"email\">\n                        <Form.Label>이메일 주소</Form.Label>\n                        <Form.Control type=\"email\" ref={emailRef} required  />\n                     </Form.Group>\n                     {/* 기존 회원 비활성 */}\n                     <Button disabled={loading} \n                     className=\"w-100 mt-3\" \n                     type=\"submit\">\n                       비밀번호 찾기\n                   </Button>\n                 </Form>\n                 {/* 로그인 페이지로 다시 돌아갈때  */}\n               <div className=\"w-100 text-center mt-3\">\n                <Link to=\"/login\"\n                 style={{ textDecoration: \"none\"}}\n                >돌아가기</Link>\n             </div>  \n           </Card.Body> \n           </Card>\n           <div className=\"w-100 text-center mt-2\">\n              회원 가입 하셨나요?\n               <Link to=\"/signup\" style={{ textDecoration: 'none' }}>\n                   회원가입\n                </Link>\n           </div>\n       </>\n   )\n}\n","import React, {useRef, useState} from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link, useHistory } from 'react-router-dom';\n\nexport default function UpdateProfile() {\n    // 이메일 비밀번호 비밀번호 확인에 대한 useRef 주소가 필요하기 때문에 이 세게를 묶어 선언한다.\n        const emailRef = useRef()\n    const passwordRef = useRef()\n    const passwordConfirmRef = useRef()\n\n\n    // 사용자를 인증해서 프로필을 가져오게함\n    // 업데이트할 사용자 , 이메일 주소 비밀번호를 불러온다.\n    const { currentUser, updatePassword, updateEmail } = useAuth()\n\n    // 오류 걸러냄\n    const [error, setError] = useState(\"\")\n\n    // 로딩\n    const [loading, setLoading] = useState(false);\n\n\n    // 회원가입시 로그인창으로 이동 \n    const history = useHistory();\n\n     // 비동기가 아니기 때문에 async 제거\n    function handleSubmit(e) {\n        e.preventDefault()\n\n        // 비밀번호가 재획인 값과 동일한지 판단해서 값이 아닐경우 경고를 줌\n         \n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n              return setError(\"비밀번호가 동일하지 않습니다.\")\n        }\n\n          \n        // 몇가지의 약속을 선언함\n        const promises = []\n        // 변경시 로딩\n        setLoading(true)\n        // 시도전 오류를 먼저 깜빡이게 설정\n        setError(\"\")\n\n        // 이메일 주소가 변경될때 약속\n        if (emailRef.current.value !== currentUser.emil)\n        {\n            promises.push(updateEmail(emailRef.current.value))\n        }\n\n        // 바뀔이메일주소를 판단하고 기다린뒤 업데이트할 비밀번호를 선언하는 칸 \n        if (passwordRef.current.value) {\n            // 비밀번호가 변경될때를 약속\n            promises.push(updatePassword(passwordRef.current.value))\n        }\n\n        // 모든 약속 배열을 Promise로 전달\n        Promise.all(promises)\n        .then(() => {\n            // 모든약속이 만족될시 실행되는 이벤트 == 업데이트 즉시 시작 홈페이지로 이동\n            history.push(\"/\")\n        })\n        .catch(() => {\n            // 오류 발생시\n            setError(\"프로필을 업데이트 할수 없습니다.\")\n        })\n        .finally(() => {\n            // 성공여부 관련없이 실행\n            setLoading(false)\n        })\n\n \n\n    }\n\n    // required 를 지우면 하나의 비밀번호만 입력하고 업데이트시 이것을 막음\n\n    return (\n        <>\n        <Card>\n            <Card.Body>\n                  <h2 className=\"text-center mb-4\">프로필 업데이트</h2>\n                  {error && <Alert variant=\"danger\">{error}</Alert>}\n                  <Form onSubmit={handleSubmit}>\n                      <Form.Group id=\"email\">\n                         <Form.Label>이메일 주소</Form.Label>\n                         {/* 기본 값을 이메일로 설정 */}\n                         <Form.Control \n                         type=\"email\" \n                         ref={emailRef} \n                         required \n                         defaultValue={currentUser.email} />\n                      </Form.Group>\n                      <Form.Group id=\"password\">\n                         <Form.Label>비밀번호</Form.Label>\n                         <Form.Control \n                         type=\"password\" \n                         ref={passwordRef} \n                         placeholder=\"비밀번호를 입력해주세요\"\n                         />\n                      </Form.Group>\n                      <Form.Group id=\"password-confirm\">\n                         <Form.Label>비밀번호 재확인</Form.Label>\n                         <Form.Control \n                         type=\"password\" \n                         ref={passwordConfirmRef}\n                         placeholder=\"비밀번호를 입력해주세요\"  />\n                      </Form.Group>\n                      <br/>\n                      {/* 기존 회원 비활성 */}\n                      <Button disabled={loading} className=\"w-100\" type=\"submit\">\n                          프로필 업데이트\n                    </Button>\n                  </Form>\n            </Card.Body> \n            </Card>\n            <div className=\"w-100 text-center mt-2\">\n               <Link to=\"/\">취소</Link>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\nimport Signup from './Signup';\nimport { Container } from 'react-bootstrap';\nimport { AuthProvider } from '../contexts/AuthContext';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport Dashboard from './Dashboard';\nimport Login from './Login';\nimport PrivateRoute from './PrivateRoute';\nimport ForgotPassword from './ForgotPassword';\nimport UpdateProfile from './UpdateProfile';\n\nfunction App()  {\n  return (\n    <> \n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      style={{ minHeight: \"100vh\" }}\n      >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\"}}>\n        <Router>\n            <AuthProvider>\n               <Switch>\n                 {/* 각각 router 설정 */}\n                   <PrivateRoute exact path=\"/react-firebase-sample2\" component={Dashboard} />\n                   <PrivateRoute exact path=\"/update-profile\" component={UpdateProfile} />\n                   \n                   <Route path=\"/signup\" component={Signup} />\n                   <Route path=\"/login\" component={Login} />\n                   <Route path=\"/forgot-password\" component={ForgotPassword} />\n                   \n               </Switch>\n            </AuthProvider>\n        </Router>\n \n     </div>\n    </Container>\n \n    </> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  )"],"sourceRoot":""}